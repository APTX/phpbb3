/**
* General development pardigm used
*/

Our important "global" objects are realized through singletons (objects initialized once). To overcome the need for globals all objects are called with the abstract phpbb.
Every object defines two public vars, named $phpbb_required and $phpbb_optional. Both list objects required or being optional. This allows us to do proper unit tests.
The unit test writer itself is able to do two things. (1) directly grab the dependencies of the object and therefore instantly knows what is expected and (2) able to instatiate them on his own through phpbb::register/unregister.
If an object is needed which is not referenced through phpbb:: then the constructor may ask for it.

Ideas:	- We check for the presence of required objects within the objects constructor.
	- Because we list required and optional objects we could check them automatically while registering them. If we do this we need to separate between "essential" dependencies and those objects only needed for certain operations.

/**
* REGISTER order if common.php included
*/

/core/phpbb/
/core/request/
/core/security/
/core/url/
/core/system/
-> message handler assigned
-> super globals disabled
/db/dbal/
/acm/
	-> /classes/cache/
-> config obtained
/template/
/acl/
/user/
	-> /classes/session/
/api/
/plugins/init
/plugins/setup

/**
* REFERENCES
* Simple Layout of all references and collaborators...
* The classes are displayed as a path to identify it's location, meaning and use.
*/

/core/phpbb (The abstract phpbb will be our Application Builder later too)
	Required: include:constants, include:functions, include:functions_content, include:utf8_tools

/core/request
/core/security extends phpbb_plugin_support
	Required:	config, user (only the link hashing and form token generation require this)

/core/url extends phpbb_plugin_support
	Required:	user, config
	Optional:	template	If this is missing, then meta_refresh redirects directly

/core/system extends phpbb_plugin_support
	Required:	config, url

/db/dbal (Our database abstraction layer)
	Required:	config

	Optional:	acm (If this is missing then sql queries are not cached)
			user (If this is missing then english-only messages are displayed
			acl (If this is missing then an SQL Query is not displayed fully if not in installation or debug_extra defined)

/acm/

/classes/cache/
	Required:	config, acm, db

/classes/template/
	Required:	user, config

/classes/acl/
	Required:	acm, db

/classes/user/
	Required:	config, acl, db, template, security, system, acm, api->user

/classes/session/
	Required:	system, config, security
	Optional:	db

/classes/api/


/**
* Directory/File layout
*/

*Directories with special handling*

/includes/core/ - Main Core files
	bootstrap.php: This file is called from common.php and initializes the phpBB Core
	core.php: Main file defining:
		phpbb abstract
		SPL autoload function

	Pre-defined core files:
		These files consist of classes used all over the main product.

		Filename		Class Name			Abstract		Assigned to phpbb::		Callable through
		request.php		deactivated_super_global	No			No				*Private*
					phpbb_request			Yes			No				request::
		security.php		phpbb_security			No			Yes				phpbb::$security
		system.php		phpbb_system			No			Yes				get system host with phpbb::$user->system['host'], phpbb::get('system')->get_host() internally
		url.php			phpbb_url			No			Yes				phpbb::$url


/includes/api/ - API Files

*Other PHP source directories*

/includes:

	constants.php: File defining system-wide constants.
	functions.php: File defining standard functions used everywhere.
	functions_admin.php: File defining standard admin functions, available within the ACP

/includes/acm/ - Cache System (Not Finished)
/includes/auth/ - Authentication System (Not Finished)
/includes/bbcode/ - BBCode System (Not Finished)
/includes/captcha/ - Captcha System (Not Finished)
/includes/db/ - DBAL (Not Finished)
/includes/diff/ - Diff Engine (Not Finished)
/includes/hooks/ - Hook System (Not Finished)
/includes/search/ - Search System (Not Finished)
/includes/utf/ - UTF8-specific files/classes

/includes/classes/ - A collection of classes used now and then. Basically, they did not warrant their own directory.
	template.php, template_compile.php: The template engine

		The template engine is available through phpbb::$template. The required file is template.php, the class name is phpbb_template.
		The template_compile.php file consist of the template compiler only called if needed within template.php. There is no need to call or include this file directly.

	session.php: The session class used for managing sessions.

		Session.php defines the class phpbb_session. This class is not directly used. The user class (see user.php) extends the session.
		Within the session object an authentication plugin is able to be used. It only will be initialized for a valid user object (see user.php).

	user.php: The user object, handling user-based session and user-specific setups. It defines the users workspace.

		The user object is available through phpbb::$user.
		The phpbb_user class extends the phpbb_session class from session.php.
		Within the user object the authentication plugin is initialized. The auth method is passed to the constructor. It is located within the constructor and looks like this:

		[code]
		// Init auth object
		$method = basename(trim($auth_method));
		$class = 'phpbb_auth_' . $method;

		if (class_exists($class))
		{
			$this->auth = new $class();
		}
		[/code]

		Authentication realms can then be accessed by ->auth->function(). Generally developers should check for a valid object and if the method exists before using it.
		The auth object is initialized within the user class, because authentication plugins directly relate to valid users, although they mostly define methods for user session handling.

	cache.php: Static class for obtaining cached items/arrays

		The cache.php file defines a static class named phpbb_cache. It is used to obtain standard arrays, like the configuration, attachment extensions, word censor, etc.
		A sample call would be: $data = phpbb_cache::obtain_config();

	acl.php: ACL/permission class.

		The ACL object is available through phpbb::$acl.
		acl.php defines several classes:

		Public:
		phpbb_acl is the main class holding methods to get permissions.

		Internal:
		phpbb_acl_role holds/sets and gets role-specific permission data for internal use.
		phpbb_acl_data holds/sets and gets raw permission data for internal use.

	acl_admin.php: ACL/Permission admin class.

		The ACL object is available through phpbb::$acl within the ACP.

		Public:
		phpbb_acl_admin is the main class holding methods to set/remove permissions. This class is extended from phpbb_acl defined in acl.php.

		Internal:
		(mask)

*Special directories*

/modules/ Directory holding directories/files for the defined module sections.

	ucp/: The user control panel.
	ucp/info/: Information Files for the user control panel.

	mcp/: The moderator control panel.
	mcp/info/: Information Files for the user control panel.

	acp/: The administration control panel.
	acp/info/: Information Files for the administration control panel.

	*Common Instructions*

	A directory defines a common collection of modules. The module must have a unique name, all lowercase and only contain characters from a-z.
	Every file within the directory must be prefixed by the modules name, for example ucp_filename.php for files within the directory ucp and defining a class with the same name, prefixed with phpbb_
	Every such prefixed file is not able to be called standalone, but only defines a module.
	The file calling the modules and being responsible for the setup is called exactly like the directory name, for example ucp.php for the ucp directory.

	Example:

	Filename		Class Name			Filename in info/		Class name in info/
	ucp_main.php		phpbb_ucp_main			ucp_main.php			phpbb_ucp_main_info

	Info Layout (Abstract):

	phpbb_ucp_main_info uses phpbb_module_info

	function module(): Defines the modules general informaton, permissions and layout
	function install(): Defines installation routines
	function uninstall(): Defines uninstallation routines

	Within the info/ directory there must be one file called bootstrap.php, defining the main layout of the whole module:

	phpbb_ucp_info

	function module(): Defines standard module behaviour and visibility. For example the number of levels for the menu layout and template location (the ACP for example does not use the styles directory, but a custom one)
	function install(): Installation of the whole module
	function uninstall(): Uninstallation of the whole module

	*Additional classes*

	A main module file usually defines several sections for the menu used or the main module used. To be able to separate several functionalities there is a way to define more classes connected to the main module.

/plugins/ - Plugins for phpBB

Rules:
	- Plugins must define one directory in /plugins/
	- This directory must contain a file named like the directory with the information about the plugins structure, installation and uninstallation routines
	- Plugins could consist of any additional files or directories

Sample Layout:
	- Plugin setup file: /plugins/myapp/myapp.php
	- Additional files /plugins/myapp/functions.php, /plugins/myapp/core_system.php

	- The plugin should add a new method to the core_system class to get the PATH environment variable
	- The plugin should add a new key to the systems page array for the application path
	- The plugin should also inject the exit_handler to finish it's work

Setup File:

Legend:	[name]: This is the directory name used (here: myapp)
	[class]: phpBB class name to plug in

Class Name: phpbb_[name]_info implements phpbb_plugin_info
Public Vars: $name, $description, $author, $version
Functions: public function setup_plugin(phpbb_plugins $object): Setup the plugin
Optional Functions: public function init(): Can contain code executed after plugin setup

Possible calls within setup routine:

register_includes():	Defines the files phpBB should include. File names are passed as arguments.
register_plugins():	Defines the class names defining plugins, must follow the following name rule: phpbb_[name]_[class]. Classes are passed as arguments.
register_function():	Defines the functions to inject hooks into.
	$function_name:	The function name to inject into.
	$hook_name:	The hooks function name. If it is a method, please use array(object, method)
	$mode:		The mode to use, possible modes are:
		FUNCTION_OVERRIDE:	Overrides the function with the hook and returns result
		FUNCTION_INJECT:	Inject hook into function with specified $action
	$action:	The action to use. Default actions are:
		'default':	This is the default action used for the first hook called, usually at the start of the function.
		'return':	This is the action used to specify the hook used at the end of the function. Returns the result.
			For other actions possible have a look at the plugin documentation.

Example:

[code]
class phpbb_myapp_info implements phpbb_plugin_info
{
	public $name = 'My Application';
	public $description = 'Description';
	public $author = 'Meik Sievertsen';
	public $version = '1.0.0';

	function setup_plugin(phpbb_plugins $object)
	{
		// Define common files included by default
		$object->register_includes('functions', 'core_system');

		// Define the plugins/classes registered within the setup process
		$object->register_plugins('phpbb_myapp_system', 'phpbb_myapp_security');

		// Add one simple hook...
		$object->register_function('page_header', 'my_page_header_prefix', phpbb::FUNCTION_INJECT, 'default');
		$object->register_function('page_header', 'my_page_header_login', phpbb::FUNCTION_INJECT, 'login_logout');
	}

	function init()
	{
		// Extend acm with own cache type
		phpbb::$acm->cache_types['myext'] = NULL;
		phpbb::$acm->register('myext');

		phpbb::$acm->put_myext('sometest', array('here' => 1));
	}
}
[/code]

Plugin File:

The plugin file defines one or more plugins and need to follow the following rules:

Legend:	[name]: This is the directory name used (here: myapp)
	[class]: phpBB class name to plug in
	hook: This is a synonym we use for classifying the plugins method

Class Name: phpbb_[name]_[class] implements phpbb_plugin_setup
Public Vars:
	$phpbb_plugin:	Used if you need to plug into a phpBB Class
	$class_plugin:	Used if you need to plug into any other class
Functions: public function setup_plugin(phpbb_plugin_support $object): Setup the plugin

Possible calls within setup routine:

register_attribute():	Register a new attribute. First parameter is the attribute name, second is $this. If the attribute already exists within the original class then it will be overwritten.
register_method():	Register a new method (hook), overrides one or inject into one.
	$method_name:	The method name to inject into. False if a new method is registered.
	$hook_name:	The hook name to use.
	$this:		Always $this
	$mode:		The mode to use, possible modes are:
		METHOD_ADD:		Add the method (hook). First parameter should be false too.
		METHOD_OVERRIDE:	Overrides the method with the hook and returns result
		METHOD_INJECT:		Inject hook into method with specified $action
	$action:	The action to use. Default actions are:
		'default':	This is the default action used for the first hook called, usually at the start of the method.
		'return':	This is the action used to specify the hook used at the end of the function. Returns the result.
			For other possible actions refer to the plugin documentation.

Example:
[code]
class phpbb_myapp_system implements phpbb_plugin_setup
{
	public $phpbb_plugin = 'system';

	public function setup_plugin(phpbb_plugin_support $object)
	{
		$object->register_method(false, 'get_path', $this);
		$object->register_method('get_page', 'get_page', $this, phpbb::PLUGIN_INJECT, 'return');
	}

	/**
	* Get PATH environment variable
	*/
	public function get_path(phpbb_system $object)
	{
		// Return PATH
		return (!empty($_SERVER['PATH'])) ? $_SERVER['PATH'] : getenv('PATH');
	}

	public function get_page(phpbb_system $object, $result)
	{
		$result['application_path'] = '/var/www/customer/';
		return $result;
	}
}

class phpbb_myapp_security implements phpbb_plugin_setup
{
	var $phpbb_plugin = 'security';
	var $x = 1;

	function setup_plugin(phpbb_plugin_support $object)
	{
		$object->register_method(false, 'test', $this);
		$object->register_method('unique_id', 'unique_id', $this, phpbb::PLUGIN_OVERRIDE);

		$object->register_attribute('x', $this);
		$object->register_attribute('hash_type', $this);

		$object->register_method('gen_rand_string', 'gen_rand_string', $this, phpbb::PLUGIN_INJECT);
	}

	public function test(phpbb_security $object)
	{
		echo 'test';
		print_r($object);
	}

	public function gen_rand_string(phpbb_security $object, $num_chars)
	{
		$num_chars = 7;
	}

	public function unique_id(phpbb_security $object)
	{
		return md5('tst');
	}
}
[/code]


*Standard directories*

/develop/ - Internal helper files for development. Only present in SVN
/docs/ - Documentation, Documents, License file, Coding Guidelines

/cache/ - Cache directory for storing files. Needs to be writeable
/store/ - Store directory for storing backup files and temporary files. Needs to be writeable
/files/ - Files directory for storing attachments and uploaded files. Needs to be writeable

*Standard Files*

/common.php: Main file to be always included.
/cron.php: The CRON script
/style.php: Responsible for CSS style output

/index.php: The front page
/view.php: View Syndicator, for accessing "states" (viewforum, viewtopic, search, posting) - rewrite_url(!)
/module.php: View Syndicator, for accessing modules (ucp, mcp) - rewrite_url(!)

If view/module.php is not used: memberlist.php, posting.php, report.php, search.php, ucp.php, viewforum.php, viewonline.php, viewtopic.php

*Template directory layout*

The following describes the main template layout of a style. Templates are organised in logical groups, presented by directories.

There are some pre-defined locations set up for templates which are searched and included automatically (but can be overridden):

For every module defined within the /plugins (/modules?) directory, there is one directory within the template, for example:
ucp/ for the user control panel located in /plugins/ucp/

Other pre-defined logical directories:
	includes/: Template files included by other files (overall_header, overall_footer, simple_header, jumpbox)
	auth/: Authentication related files (login_body, login_forum)
	error/:	error templates (SQL Error, Backtrace, etc)
	notify/: Notification boxes, confirm boxes, etc.

	captcha/: Captcha relevant template files
	forum/: Forum view relevant files
	topic/: Topic view relevant files
	posting/: Posting relevant files
	memberlist/: Memberlist relevant files
	search/: Files for teh search plugins


/**
Modules documentation:

Rules:
	- Modules must define one directory in /modules/
	- This directory must contain two files:
		bootstrap.php with the information about the modules structure, installation and uninstallation routines.
		index.php with code to handle the different modes the module is executing
	- Modules may consist of any number of additional files or directories

	ucp/: The user control panel.
	mcp/: The moderator control panel.
	acp/: The administration control panel.
*/
