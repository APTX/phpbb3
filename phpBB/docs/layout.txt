/**
* General development pardigm used
*/

Our important "global" objects are realized through singletons (objects initialized once). To overcome the need for globals all objects are referenced through the abstract phpbb.
Instead of doing dependency injection we only check for the presence of required objects within the objects constructor. Additionally every object defined a public var $phpbb_required and $phpbb_optional, listing the objects needed. This allows us to do proper unit tests.
The unit test writer itself is able to do two things. (1) directly grabs the dependencies of the object and therefore instantly knows what is expected and (2) able to instatiate them on his own through phpbb::register/unregister.
If an object is needed which is not referenced through phpbb:: then the constructor will ask for it. This way we overcome problems with dependencies and order of calls.

/**
* REGISTER order
*/

/core/phpbb/
/core/request/
/core/security/
/core/url/
/core/system/
/core/plugins/*
-> message handler assigned
-> super globals disabled
/db/dbal/
/acm/
	-> /classes/cache/
-> config obtained
/template/
/acl/
/user/
	-> /classes/session/
/api/

/**
* REFERENCES
* Simple Layout of all references and collaborators... dependency building
* The classes are displayed as a path to identify it's location, meaning and use.
*/

/core/phpbb (The abstract phpbb will be our Application Builder later too)
	Required: include:constants, include:functions, include:functions_content, include:utf8_tools

/core/request
/core/security extends phpbb_plugin_support
	Required:	config, user (only the link hashing and form token generation require this)

/core/url extends phpbb_plugin_support
	Required:	user, config
	Optional:	template If this is missing, then meta_refresh redirects directly

/core/system extends phpbb_plugin_support
	Required:	config, url

/db/dbal (Our database abstraction layer)
	Required:	config

	Optional:	acm (If this is missing then sql queries are not cached)
			user (If this is missing then english-only messages are displayed
			acl (If this is missing then an SQL Query is not displayed fully if not in installation or debug_extra defined)

/acm/

/classes/cache/
	Required:	config, acm, db

/classes/template/
	Required:	user, config

/classes/acl/
	Required:	acm, db

/classes/user/
	Required:	config, acl, db, template, security, system, acm, api->user

/classes/session/
	Required:	system, config, security
	Optional:	db

/classes/api/


/**
* Directory/File layout
*/

*Directories with special handling*

/includes/core/ - Main Core files
	bootstrap.php: This file is called from common.php and initializes the phpBB Core
	core.php: Main file defining:
		phpbb abstract
		phpbb_plugin_support abstract
		phpbb_plugin interface
		SPL autoload function

	Pre-defined core files:
		These files consist of classes used all over the main product.

		Filename		Class Name			Abstract		Assigned to phpbb::		Callable through
		request.php		deactivated_super_global	No			No				*Private*
					phpbb_request			Yes			No				request::
		security.php		phpbb_security			No			Yes				phpbb::$security
		system.php		phpbb_system			No			Yes				get system host with phpbb::$user->system['host'], phpbb::get('system')->get_host() internally
		url.php			phpbb_url			No			Yes				phpbb::$url

	Files residing in the subdirectory plugins/ and prefixed with core_:
		These files are custom files loaded after the main pre-defined core files. They have special rules and different names.
		They allow for registering own objects defined, allow to plug in to core classes as well as overriding core class methods (only if the relevant methods support this)

		Naming schema:
			- Prefix files with core_
			- The filename should match the class name used
			- The class name must be prefixed with phpbb_core_
			- A file called core_example.php defines a class phpbb_core_example
			- A file called core_system_mymod.php defines a class phpbb_core_system_mymod with the intention to plug into phpbb_system

		Using the plugin methods:

		A class defined in plugins is able to plug into the core files, defining additional methods, attributes or overriding methods and attributes.

		- It is always possible to define new methods
		- It is always possible to define new attributes
		- It is always possible to override public attributes
		- Overriding methods is only possible for methods supporting this
		- Calling code at the end of a method is only possible for methods supporting this
		- It is not possible to override private or protected methods
		- It is not possible to override private or protected methods

		Pluggable core files/methods:

			File		Class			Object				Methods (Override)	Methods (Plug code to the end)
			security.php	phpbb_security		phpbb::$security		gen_rand_string()	gen_rand_string()
												unique_id()		unique_id()
			system.php	phpbb_system		phpbb::$system


		Example use-case:

			yadda yadda... not finished yet... need to eat... and sleep...

			- You want to get additional system variables for your application, for example the PATH environment variable.
			- Drop in a file: /includes/core/core_system.php
			- The file contents should look like:

			[code]
			<?php
				class phpbb_core_system extends phpbb_system
				{
					public $phpbb_register = true;

					/**
					* Get PATH environment variable
					*/
					protected function get_path()
					{
						// Return PATH
						return (!empty($_SERVER['PATH'])) ? $_SERVER['PATH'] : getenv('PATH');
					}
				}
			?>
			[/code]

			- access your PATH environment variable through phpbb::$user->system['path'];

/includes/api/ - API Files
	index.php: This file is called by /includes/core/index.php to initialize the basic phpBB API, callable through phpbb::$api->

	Pre-defined API files:
		These files consist of API classes used all over the main product.

		Filename			Class Name		Abstract		Added to phpbb::$api		Callable through
		user.php			phpbb_api_user		No			Yes				phpbb::$api->$user->

	Files prefixed with api_:
		These files consist of classes defining functions/methods used for the api.

		Naming schema:
			- Prefix files with api_
			- The filename must match the class name used
			- The class name must be prefixed with phpbb__api_ (note the difference here is two __ instead of one _)
			- A file called api_example.php defines a class phpbb__api_example
			- If the class has a public var named $phpbb_api_register then the class is instantiated as phpbb::$api->$example->

		Some examples with their cases:

		Filename		Class Name				Abstract		Added to phpbb::$api		Callable through
		api_example.php		phpbb__api_example			No			No				*Private*
		api_example.php		phpbb__api_example			No			Yes				phpbb::$api->$example->
		api_example.php		phpbb__api_example			Yes			No				phpbb__api_example::
		api_user.php		phpbb__api_user
						extends phpbb_api_user		No			Yes				overwrites phpbb::$api->$user


*Other PHP source directories*

/includes:

	constants.php: File defining system-wide constants.
	functions.php: File defining standard functions used everywhere.
	functions_admin.php: File defining standard admin functions, available within the ACP

/includes/acm/ - Cache System
/includes/auth/ - Authentication System
/includes/bbcode/ - BBCode System
/includes/captcha/ - BBCode System
/includes/db/ - DBAL
/includes/diff/ - Diff Engine
/includes/hooks/ - Hook System
/includes/search/ - Search System
/includes/utf/ - UTF8-specific files/classes

/includes/classes/ - A collection of classes used now and then. Basically, they did not warrant their own directory.
	template.php, template_compile.php: The template engine

		The template engine is available through phpbb::$template. The required file is template.php, the class name is phpbb_template.
		The template_compile.php file consist of the template compiler only called if needed within template.php. There is no need to call or include this file directly.

	session.php: The session class used for managing sessions.

		Session.php defines the class phpbb_session. This class is not directly used. The user class (see user.php) extends the session.
		Within the session object an authentication plugin is able to be used. It only will be initialized for a valid user object (see user.php).

	user.php: The user object, handling user-based session and user-specific setups. It defines the users workspace.

		The user object is available through phpbb::$user.
		The phpbb_user class extends the phpbb_session class from session.php.
		Within the user object the authentication plugin is initialized. It is located within the constructor and looks like this:

		[code]
		// Init auth object
		$method = basename(trim(phpbb::$config['auth_method']));
		$class = 'phpbb_auth_' . $method;

		if (class_exists($class))
		{
			$this->auth = new $class();
		}
		[/code]

		Authentication realms can then be accessed by ->auth->function(). Generally developers should check for a valid object and if the method exists before using it.
		The auth object is initialized within the user class, because authentication plugins directly relate to valid users, although they mostly define methods for user session handling.

	cache.php: Static class for obtaining cached items/arrays

		The cache.php file defines a static class named phpbb_cache. It is used to obtain standard arrays, like the configuration, attachment extensions, word censor, etc.
		A sample call would be: $data = phpbb_cache::obtain_config();

	acl.php: ACL/permission class.

		The ACL object is available through phpbb::$acl.
		acl.php defines several classes:

		Public:
		phpbb_acl is the main class holding methods to get permissions.

		Internal:
		phpbb_acl_role holds/sets and gets role-specific permission data for internal use.
		phpbb_acl_data holds/sets and gets raw permission data for internal use.

	acl_admin.php: ACL/Permission admin class.

		The ACL object is available through phpbb::$acl within the ACP.

		Public:
		phpbb_acl_admin is the main class holding methods to set/remove permissions. This class is extended from phpbb_acl defined in acl.php.

		Internal:
		(mask)

*Special directories*

/plugins (is /modules better? At the moment it describes them better): Directory holding directories/files for the defined module sections.

	ucp/: The user control panel.
	ucp/info/: Information Files for the user control panel.

	mcp/: The moderator control panel.
	mcp/info/: Information Files for the user control panel.

	acp/: The administration control panel.
	acp/info/: Information Files for the administration control panel.

	*Common Instructions*

	A directory defines a common collection of modules. The module must have a unique name, all lowercase and only contain characters from a-z.
	Every file within the directory must be prefixed by the modules name, for example ucp_filename.php for files within the directory ucp and defining a class with the same name, prefixed with phpbb_
	Every such prefixed file is not able to be called standalone, but only defines a module.
	The file calling the modules and being responsible for the setup is called exactly like the directory name, for example ucp.php for the ucp directory.

	Example:

	Filename		Class Name			Filename in info/		Class name in info/
	ucp_main.php		phpbb_ucp_main			ucp_main.php			phpbb_ucp_main_info

	Info Layout (Abstract):

	phpbb_ucp_main_info uses phpbb_module_info

	function module(): Defines the modules general informaton, permissions and layout
	function install(): Defines installation routines
	function uninstall(): Defines uninstallation routines

	Within the info/ directory there must be one file called bootstrap.php, defining the main layout of the whole module:

	phpbb_ucp_info

	function module(): Defines standard module behaviour and visibility. For example the number of levels for the menu layout and template location (the ACP for example does not use the styles directory, but a custom one)
	function install(): Installation of the whole module
	function uninstall(): Uninstallation of the whole module

	*Additional classes*

	A main module file usually defines several sections for the menu used or the main module used. To be able to separate several functionalities there is a way to define more classes connected to the main module.



*Standard directories*

/develop/ - Internal helper files for development. Only present in SVN
/docs/ - Documentation, Documents, License file, Coding Guidelines

/cache/ - Cache directory for storing files. Needs to be writeable
/store/ - Store directory for storing backup files and temporary files. Needs to be writeable
/files/ - Files directory for storing attachments and uploaded files. Needs to be writeable

*Standard Files*

/common.php: Main file to be always included.
/cron.php: The CRON script
/style.php: Responsible for CSS style output

/index.php: The front page
/view.php: View Syndicator, for accessing "states" (viewforum, viewtopic, search, posting) - rewrite_url(!)
/module.php: View Syndicator, for accessing modules (ucp, mcp) - rewrite_url(!)

If view/module.php is not used: memberlist.php, posting.php, report.php, search.php, ucp.php, viewforum.php, viewonline.php, viewtopic.php

*Template directory layout*

The following describes the main template layout of a style. Templates are organised in logical groups, presented by directories.

There are some pre-defined locations set up for templates which are searched and included automatically (but can be overridden):

For every module defined within the /plugins (/modules?) directory, there is one directory within the template, for example:
ucp/ for the user control panel located in /plugins/ucp/

Other pre-defined logical directories:
	includes/: Template files included by other files (overall_header, overall_footer, simple_header, jumpbox)
	auth/: Authentication related files (login_body, login_forum)
	error/:	error templates (SQL Error, Backtrace, etc)
	notify/: Notification boxes, confirm boxes, etc.

	captcha/: Captcha relevant template files
	forum/: Forum view relevant files
	topic/: Topic view relevant files
	posting/: Posting relevant files
	memberlist/: Memberlist relevant files
	search/: Files for teh search plugins
